//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading.Tasks;

namespace CategoriesApplication.CategoryService {
	[DebuggerStepThrough()]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="CategoryFault", Namespace="http://schemas.datacontract.org/2004/07/NorthwindServiceLibrary.Faults")]
    [Serializable()]
    public partial class CategoryFault : object, IExtensibleDataObject, INotifyPropertyChanged {
        
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private int CategoryIdField;
        
        [OptionalField()]
        private string MessageField;
        
        [Browsable(false)]
        public ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [DataMember()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [DebuggerStepThrough()]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="BasicCategory", Namespace="http://schemas.datacontract.org/2004/07/NorthwindModel.Models.CustomModels")]
    [Serializable()]
    [KnownType(typeof(Category))]
    public partial class BasicCategory : object, IExtensibleDataObject, INotifyPropertyChanged {
        
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private int CategoryIDField;
        
        [OptionalField()]
        private string CategoryNameField;
        
        [Browsable(false)]
        public ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public int CategoryID {
            get {
                return this.CategoryIDField;
            }
            set {
                if ((this.CategoryIDField.Equals(value) != true)) {
                    this.CategoryIDField = value;
                    this.RaisePropertyChanged("CategoryID");
                }
            }
        }
        
        [DataMember()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [DebuggerStepThrough()]
    [GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/NorthwindModel.Models")]
    [Serializable()]
    public partial class Category : BasicCategory {
        
        [OptionalField()]
        private string DescriptionField;
        
        [DataMember()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
    }
    
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    [ServiceContract(ConfigurationName="CategoryService.ICategoryService")]
    public interface ICategoryService {
        
        // CODEGEN: Контракт генерации сообщений с именем упаковщика (CategoryImage) сообщения CategoryImage не соответствует значению по умолчанию (GetCategoryImage).
        [OperationContract(Action="http://tempuri.org/ICategoryService/GetCategoryImage", ReplyAction="http://tempuri.org/ICategoryService/GetCategoryImageResponse")]
        [FaultContract(typeof(CategoryFault), Action="http://tempuri.org/ICategoryService/GetCategoryImageCategoryFaultFault", Name="CategoryFault", Namespace="http://schemas.datacontract.org/2004/07/NorthwindServiceLibrary.Faults")]
        CategoryImage GetCategoryImage(CategoryImage request);
        
        [OperationContract(Action="http://tempuri.org/ICategoryService/GetCategoryImage", ReplyAction="http://tempuri.org/ICategoryService/GetCategoryImageResponse")]
        Task<CategoryImage> GetCategoryImageAsync(CategoryImage request);
        
        // CODEGEN: Контракт генерации сообщений с операцией SetCategoryImage не является ни RPC, ни упакованным документом.
        [OperationContract(Action="http://tempuri.org/ICategoryService/SetCategoryImage", ReplyAction="http://tempuri.org/ICategoryService/SetCategoryImageResponse")]
        [FaultContract(typeof(CategoryFault), Action="http://tempuri.org/ICategoryService/SetCategoryImageCategoryFaultFault", Name="CategoryFault", Namespace="http://schemas.datacontract.org/2004/07/NorthwindServiceLibrary.Faults")]
        SetCategoryImageResponse SetCategoryImage(CategoryImage request);
        
        [OperationContract(Action="http://tempuri.org/ICategoryService/SetCategoryImage", ReplyAction="http://tempuri.org/ICategoryService/SetCategoryImageResponse")]
        Task<SetCategoryImageResponse> SetCategoryImageAsync(CategoryImage request);
        
        [OperationContract(Action="http://tempuri.org/ICategoryService/GetCategories", ReplyAction="http://tempuri.org/ICategoryService/GetCategoriesResponse")]
        BasicCategory[] GetCategories();
        
        [OperationContract(Action="http://tempuri.org/ICategoryService/GetCategories", ReplyAction="http://tempuri.org/ICategoryService/GetCategoriesResponse")]
        Task<BasicCategory[]> GetCategoriesAsync();
    }
    
    [DebuggerStepThrough()]
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [MessageContract(WrapperName="CategoryImage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CategoryImage {
        
        [MessageHeader(Namespace="http://tempuri.org/")]
        public int CategoryId;
        
        [MessageHeader(Namespace="http://tempuri.org/")]
        public int Size;
        
        [MessageBodyMember(Namespace="http://tempuri.org/", Order=0)]
        public Stream ImageStream;
        
        public CategoryImage() {
        }
        
        public CategoryImage(int CategoryId, int Size, Stream ImageStream) {
            this.CategoryId = CategoryId;
            this.Size = Size;
            this.ImageStream = ImageStream;
        }
    }
    
    [DebuggerStepThrough()]
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [MessageContract(IsWrapped=false)]
    public partial class SetCategoryImageResponse {
        
        public SetCategoryImageResponse() {
        }
    }
    
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public interface ICategoryServiceChannel : ICategoryService, IClientChannel {
    }
    
    [DebuggerStepThrough()]
    [GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public partial class CategoryServiceClient : ClientBase<ICategoryService>, ICategoryService {
        
        public CategoryServiceClient() {
        }
        
        public CategoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CategoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryServiceClient(string endpointConfigurationName, EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryServiceClient(Binding binding, EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        CategoryImage ICategoryService.GetCategoryImage(CategoryImage request) {
            return base.Channel.GetCategoryImage(request);
        }
        
        public void GetCategoryImage(ref int CategoryId, ref int Size, ref Stream ImageStream) {
            CategoryImage inValue = new CategoryImage();
            inValue.CategoryId = CategoryId;
            inValue.Size = Size;
            inValue.ImageStream = ImageStream;
            CategoryImage retVal = ((ICategoryService)(this)).GetCategoryImage(inValue);
            CategoryId = retVal.CategoryId;
            Size = retVal.Size;
            ImageStream = retVal.ImageStream;
        }
        
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        Task<CategoryImage> ICategoryService.GetCategoryImageAsync(CategoryImage request) {
            return base.Channel.GetCategoryImageAsync(request);
        }
        
        public Task<CategoryImage> GetCategoryImageAsync(int CategoryId, int Size, Stream ImageStream) {
            CategoryImage inValue = new CategoryImage();
            inValue.CategoryId = CategoryId;
            inValue.Size = Size;
            inValue.ImageStream = ImageStream;
            return ((ICategoryService)(this)).GetCategoryImageAsync(inValue);
        }
        
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        SetCategoryImageResponse ICategoryService.SetCategoryImage(CategoryImage request) {
            return base.Channel.SetCategoryImage(request);
        }
        
        public void SetCategoryImage(int CategoryId, int Size, Stream ImageStream) {
            CategoryImage inValue = new CategoryImage();
            inValue.CategoryId = CategoryId;
            inValue.Size = Size;
            inValue.ImageStream = ImageStream;
            SetCategoryImageResponse retVal = ((ICategoryService)(this)).SetCategoryImage(inValue);
        }
        
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        Task<SetCategoryImageResponse> ICategoryService.SetCategoryImageAsync(CategoryImage request) {
            return base.Channel.SetCategoryImageAsync(request);
        }
        
        public Task<SetCategoryImageResponse> SetCategoryImageAsync(int CategoryId, int Size, Stream ImageStream) {
            CategoryImage inValue = new CategoryImage();
            inValue.CategoryId = CategoryId;
            inValue.Size = Size;
            inValue.ImageStream = ImageStream;
            return ((ICategoryService)(this)).SetCategoryImageAsync(inValue);
        }
        
        public BasicCategory[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public Task<BasicCategory[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
    }
}
